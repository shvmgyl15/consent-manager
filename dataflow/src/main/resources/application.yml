server:
  port: 8000
dataflow:
  gatewayservice:
    baseUrl: ${GATEWAY_BASE_URL}
    requestTimeout: ${GATEWAY_REQUEST_TIMEOUT}
    clientSecret: ${GATEWAY_CLIENT_SECRET}
    clientId: ${GATEWAY_CLIENT_ID}
    jwkUrl: ${CENTRAL_REGISTRY_JWK_URL}
  consentmanager:
    url: ${CONSENT_MANAGER_URL}
  db:
    host: ${POSTGRES_HOST}
    port: ${POSTGRES_PORT:5432}
    schema: ${DATAFLOW_DB_NAME}
    user: ${POSTGRES_USER}
    password: ${POSTGRES_PASSWORD}
    poolSize: 5
  keycloak:
    baseUrl: ${KEY_CLOAK_URL}
    clientId: ${KEY_CLOAK_CONSENT_CLIENT_ID}
    clientSecret: ${KEY_CLOAK_CONSENT_CLIENT_SECRET}
    jwkUrl:  ${KEY_CLOAK_JWK_URL}
  #Valid values are guava(for local), redis
  cacheMethod: ${CACHE_METHOD:guava}
  redis:
    #Will not be used if cacheMethod is guava
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:password}
    keep-alive-enabled: ${KEEP_ALIVE_ENABLED:false}
    read-from: ${READ_FROM:UPSTREAM}
    retry: ${REDIS_RETRY:0}
spring:
  cloud:
    stream:
      default:
        producer:
          useNativeEncoding: false
        consumer:
          useNativeDecoding: false
      kafka:
        binder:
          brokers: ${KAFKA_URL:http://13.71.113.65:9092}
          producer-properties:
            key.serializer: org.apache.kafka.common.serialization.ByteArraySerializer
            value.serializer: org.apache.kafka.common.serialization.ByteArraySerializer
          #            schema.registry.url: ${SCHEMA_REGISTRY_URL:http://13.71.113.65:8081}
          consumer-properties:
            key.deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
            value.deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
            #            schema.registry.url: ${SCHEMA_REGISTRY_URL:http://13.71.113.65:8081}
            specific.avro.reader: true
            max.poll.records: 20
            session.timeout.ms: 6000
            max.poll.interval.ms: 2400000
      bindings:
        input-hip-data-flow-request-queue:
          destination: hip-data-flow-request-queue-02
          group: hip-data-flow-request-group
          contentType: application/json
        output-hip-data-flow-request-queue:
          destination: hip-data-flow-request-queue-02
          contentType: application/json
  rabbitmq:
    host: ${RABBITMQ_HOST}
    port: ${RABBITMQ_PORT}
    username: ${RABBITMQ_USERNAME:guest}
    password: ${RABBITMQ_PASSWORD:guest}

