server:
  port: 8000
  shutdown: graceful
consentmanager:
  consentservice:
    defaultPageSize: ${DEFAULT_PAGE_SIZE}
    maxPageSize: ${MAX_PAGE_SIZE}
    url: ${CONSENT_SERVICE_URL}
    purposeOfUseDefUrl: classpath:/static/ValueSet/purpose-of-use.json
    hiTypesDefUrl: classpath:/static/ValueSet/health-info-type.json
    #in minutes
    consentRequestExpiry: ${CONSENT_REQUEST_EXPIRY}
    name: ${CONSENT_SERVICE_NAME:PHR-App}
  scheduler:
    consent-artefact-expiry-enabled: ${CONSENT_EXPIRY_CRON_ENABLED:true}
    consent-request-expiry-enabled: ${CONSENT_EXPIRY_CRON_ENABLED:true}
    consentExpiryCronExpr: ${CONSENT_EXPIRY_CRON_EXPRESSION}
    consentRequestExpiryCronExpr: ${CONSENT_REQUEST_EXPIRY_CRON_EXPRESSION}
  clientregistry:
    url: ${Client_Registry_Url}
  gatewayservice:
    baseUrl: ${GATEWAY_BASE_URL}
    requestTimeout: ${GATEWAY_REQUEST_TIMEOUT}
    clientSecret: ${GATEWAY_CLIENT_SECRET}
    clientId: ${GATEWAY_CLIENT_ID}
    jwkUrl: ${CENTRAL_REGISTRY_JWK_URL}
    access-token-expiry-in-minutes: ${TOKEN_EXPIRY:10}
  userservice:
    url: ${User_Service_Url}
  otpservice:
    url: ${Otp_Service_Url}
    identifiers:
      - MOBILE
    expiryInMinutes: ${OTP_EXPIRY_IN_MINUTES}
  jwt:
    secret: ${JWT_SECRET}
  authorization:
    header: ${AUTHORIZATION_HEADER:Authorization}
  keycloak:
    baseUrl: ${KEY_CLOAK_URL}
    clientId: ${KEY_CLOAK_CONSENT_CLIENT_ID}
    clientSecret: ${KEY_CLOAK_CONSENT_CLIENT_SECRET}
    userName: ${KEY_CLOAK_CONSENT_USER_NAME}
    password: ${KEY_CLOAK_CONSENT_PASSWORD}
    jwkUrl: ${KEY_CLOAK_JWK_URL}
    issuer: ${KEY_CLOAK_TOKEN_ISSUER}
  db:
    host: ${POSTGRES_HOST}
    port: ${POSTGRES_PORT:5432}
    schema: ${CONSENT_MANAGER_DB_NAME}
    user: ${POSTGRES_USER}
    password: ${POSTGRES_PASSWORD}
    poolSize: 5
  linkservice:
    url: ${LINK_SERVICE_URL}
    txnTimeout: ${LINK_TRANSACTION_TIMEOUT}
  #Valid values are guava(for local), redis
  cacheMethod: ${CACHE_METHOD:guava}
  redis:
    #Will not be used if cacheMethod is guava
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:password}
    keep-alive-enabled: ${KEEP_ALIVE_ENABLED:false}
    read-from: ${READ_FROM:UPSTREAM}
    retry: ${REDIS_RETRY:0}
  listeners:
    maximumRetries: ${LISTENERS_MAXIMUM_RETRIES}
    # In milliseconds
    retryInterval: ${LISTENERS_RETRY_INTERVAL}
  nhsproperties:
    hiuid: ${NHS_HIU_ID:12342345}
  linktokencache:
    expiry: ${LINK_TOKEN_CACHE_EXPIRY:1440}
spring:
  cloud:
    stream:
      default:
        producer:
          useNativeEncoding: true
      kafka:
        binder:
          brokers: ${KAFKA_URL:http://13.71.113.65:9092}
          producer-properties:
            key.serializer: org.apache.kafka.common.serialization.ByteArraySerializer
            value.serializer: org.springframework.kafka.support.serializer.JsonSerializer
          #            schema.registry.url: ${SCHEMA_REGISTRY_URL:http://13.71.113.65:8081}
          consumer-properties:
            key.deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
            value.deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
            #            schema.registry.url: ${SCHEMA_REGISTRY_URL:http://13.71.113.65:8081}
            specific.avro.reader: true
            max.poll.records: 20
            session.timeout.ms: 6000
            max.poll.interval.ms: 2400000
      bindings:
        input-consent-request-queue:
          destination: consent-request-queue
          group: consent-request-group
          contentType: application/json
        input-hiu-consent-notification-queue:
          destination: hiu-consent-notification-queue
          group: hiu-consent-notification-group
          contentType: application/json
        input-hip-consent-notification-queue:
          destination: hip-consent-notification-queue
          group: hip-consent-notification-group
          contentType: application/json
        output-cm-hip-link-queue:
          destination: cm-hip-link-queue
          contentType: application/json
        output-consent-request-queue:
          destination: consent-request-queue
          contentType: application/json
        output-hiu-consent-notification-queue:
          destination: hiu-consent-notification-queue
          contentType: application/json
        output-hip-consent-notification-queue:
          destination: hip-consent-notification-queue
          contentType: application/json
  rabbitmq:
    host: ${RABBITMQ_HOST}
    port: ${RABBITMQ_PORT}
    username: ${RABBITMQ_USERNAME:guest}
    password: ${RABBITMQ_PASSWORD:guest}
  lifecycle:
    timeout-per-shutdown-phase: 30s
keystore:
  file-path: ${KEYSTORE_PATH:consent-manager-keystore.p12}
  password: ${KEYSTORE_PASSWORD}
  sign-artefact-keypair:
    store-type: PKCS12
    alias: ${SIGN_ARTEFACT_KEYPAIR_ALIAS:cm-sign-artefact}
  pin-verification-keypair:
    store-type: PKCS12
    alias: ${PIN_VERIFICATION_KEYPAIR_ALIAS:cm-pin-verification}
webclient:
  use-connection-pool: ${USE_HTTP_CONNECTION_POOL:true}
  connection-pool:
    poolSize: ${HTTP_CONNECTION_POOL_SIZE:500}
    maxLifeTime: ${HTTP_CONNECTION_MAX_LIFETIME:10}
    maxIdleTimeout: ${HTTP_CONNECTION_MAX_IDLETIME:5}